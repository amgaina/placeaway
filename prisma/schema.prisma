// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  sessions              Session[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  trips                 Trip[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([email, isRead])
}

enum TripStatus {
  PLANNING
  BOOKED
  COMPLETED
  CANCELLED
}

model Trip {
  id          String   @id @default(cuid())
  userId      String
  title       String
  status      TripStatus @default(PLANNING)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hasAISuggestions Boolean @default(false)
  aiGeneratedAt   DateTime?

  user        User     @relation(fields: [userId], references: [id])
  preferences TripPreference?
  chatSessions ChatSession[]
  budget      Budget?
  itineraries Itinerary[]
  recommendations TripRecommendation[]

  @@map("trips")
}

model TripPreference {
  id            String   @id @default(cuid())
  tripId        String   @unique
  visitorCount  Int      @default(1)
  hasPets       Boolean  @default(false)
  hasChildren   Boolean  @default(false)
  interests     String[]
  origin        String?
  destination   String?

  trip         Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("trip_preferences")
}

model ChatSession {
  id        String   @id @default(cuid())
  tripId    String
  messages  ChatMessage[]
  createdAt DateTime @default(now())

  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("chat_sessions")
}

enum ChatMessageRole {
  USER
  ASSISTANT
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  content       String   @db.Text
  role          ChatMessageRole   // user or assistant
  createdAt     DateTime @default(now())

  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Budget {
  id            String   @id @default(cuid())
  tripId        String   @unique
  total         Float
  accommodation Float
  transport     Float
  activities    Float
  food          Float
  other         Float

  trip          Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

model Itinerary {
  id          String   @id @default(cuid())
  tripId      String
  day         Int
  date        DateTime
  activities  Activity[]
  weatherNote String?
  tips        String[]

  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}

enum ActivityStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum TimeSlot {
  MORNING
  AFTERNOON
  EVENING
}

enum ActivityType {
  ATTRACTION
  MEAL
  TRANSPORT
  BREAK
  ACCOMMODATION
  ACTIVITIES
}

model Activity {
  id          String        @id @default(cuid())
  itineraryId String
  title       String
  description String?
  startTime   String?
  endTime     String?
  location    String?
  lat         Float?
  lng         Float?
  cost        Float?
  rating      Int          @default(0)
  feedback    String?
  status      ActivityStatus @default(PENDING)
  type        ActivityType   @default(ATTRACTION)
  timeSlot    TimeSlot      @default(MORNING)
  attachments Attachment[]
  itinerary   Itinerary     @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Attachment {
  id         String   @id @default(cuid())
  activityId String
  url        String
  type       String
  filename   String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

enum RecommendationCategory {
  TRANSPORT
  ACCOMMODATION
  FOOD
  ACTIVITIES
  SAFETY
  GENERAL
  OTHER
}

enum RecommendationPriority {
  LOW
  MEDIUM
  HIGH
}

enum RecommendationStatus {
  PENDING
  COMPLETED
  DISMISSED
}

model TripRecommendation {
  id          String                @id @default(cuid())
  tripId      String
  title       String
  description String
  category    RecommendationCategory
  priority    RecommendationPriority @default(MEDIUM)
  status      RecommendationStatus   @default(PENDING)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  trip        Trip                   @relation(fields: [tripId], references: [id], onDelete: Cascade)


  @@map("trip_recommendations")
}
